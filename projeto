[ factos primeiro, regras depois (menor arvore de procura) ]
, -> and // ; -> or // == -> // "->" -> (nao usar nenhum dos anteriores)
[ ! -> corta o resto da arvore a ser construida (encontra o primeiro elemento) ]
[ comentar o código do projeto ]
[ Usar declaraçoes que facam sentido ]
[ "<=" em Prolog é =< ]
[ usar is (em vez de =) e ? ]
[ write(x) escreve, não usar trace(x) mas apagar ]
[ usar consult para ler o ficheiro ]

Lists mechanism
[1, 2, 3] = [1 | [2, 3]] = [Head | Tail] % Head = 1 & Tail = [2, 3]
Remember these predicates!
^^^^^^^^^^^^^^^^^^^^^^^^^^

length  (?List, ?Size). 				%  get the length of the list
member  (?Elem, ?List). 				%  check if the list contains the given element
append  (?L1, ?L2, ?L3). 				%  append the list L1 and L2 and returns the result in L3
sort    (+List, -SortedList). 			%  use keysort(+PairList, -SortedList) for pairs X-Y
findall (Goal, predicate(Goal), List). 	%  list all goals that satisfy the predicate
setof   (Goal, predicate(Goal), List). 	%  = findall but without duplicates & sorted


% create_list(+Element, +Size, -List)
% returns a List with length Size and filled with Elements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
create_list(Element, Size, List):- create_list(_, 0, []). 
create_list(Element, Size, List) :-
    Size > 0,                                % the guard
    Size1 is Size - 1,
    create_list(Element, Size1, Sublist),    % recursive call
    append([Element], Sublist, List).

ou

create_list(Element, Size, List):- create_list(_, 0, []). 
create_list(_, 0, []).
create_list(Element, Size, [Element|Sublist]) :-
    Size > 0,
    Size1 is Size - 1,
    create_list(Element, Size1, Sublist).

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

% nthX(+List, +X, -Value)
% returns the Value in index X of the List
nthX(List, X, Value):- % TODO


% replace(+Index, +Value, +List, -NewList)
% returns a NewList where the element at the specified Index is replaced with Value.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
replace(Index, Value, List, NewList):- replace(0, Value, [_|Tail], [Value|Tail]).
replace(Index, Value, [Head|Tail], [Head|NewTail]):-
    Index > 0,
    NewIndex is Index - 1,
    replace(NewIndex, Value, Tail, NewTail).
